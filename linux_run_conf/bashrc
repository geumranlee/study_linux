# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# alias
alias cd1='cd ..'
alias cd2='cd ../..'
alias cd3='cd ../../..'
alias cd4='cd ../../../..'

parse_git_branch()
{
if git rev-parse --git-dir >/dev/null 2>&1
then
        gitver=$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')
else
        return 0
fi
echo -e $gitver
}

branch_color ()
{
if git rev-parse --git-dir >/dev/null 2>&1
then
        color=""
        if git diff --quiet 2>/dev/null >&2
        then
                color="${c_green}"
        else
                color="${c_red}"
        fi
else
        return 0
fi
echo -ne $color
}

export PS1='\u@\h\[${c_sgr0}\]:\W\[${c_sgr0}\] (\[$(branch_color)\]$(parse_git_branch)\[${c_sgr0}\])\$ '

source ~/.set_devtool_shortcut

# Crash tool
CRASHTOOL_PATH=/home2/seokhoon.yoon/gen11/gen11-internal/utils/crash/
export PATH=$CRASHTOOL_PATH:$PATH
export CRASH_EXTENSIONS=$CRASHTOOL_PATH

# Ramparser
RAMPARSER_PATH=/home2/seokhoon.yoon/gen11/gen11-internal/utils/qcom-tools/linux-ramdump-parser-v2
export PATH=$RAMPARSER_PATH:$PATH

# Scripts
SCRIPT_PATH=/home2/seokhoon.yoon/gen11/gen11-internal/utils/scripts/
export PATH=$SCRIPT_PATH:$PATH

# Toolchain
export ARCH=arm
export CROSS_COMPILE=arm-oe-linux-gnueabi-
export PATH=/home2/seokhoon.yoon/gen11/gen11-internal/toolchain/sysroot/usr/bin/armv7a-vfp-neon-oe-linux-gnueabi:/home2/seokhoon.yoon/gen11/gen11-internal/toolchain/gcc-linaro-4.9-2015.05-x86_64_arm-linux-gnueabi/bin:/home2/seokhoon.yoon/gen11/gen11-internal/toolchain/arm-eabi-4.8/bin:$PATH:/home2/seokhoon.yoon/gen11/source/common/tools/ramdump/tools/linux-ramdump-parser-v2/parsers/

export PYKDUMPPATH=$CRASHTOOL_PATH/py:$CRASHTOOL_PATH/LinuxDump
export PATH=~/bin:$PATH
export PATH=/home/seokhoon.yoon/ccic/devtool:$PATH
export PATH=/home/seokhoon.yoon/ccic/devtool/timeline_generator:$PATH
export PATH=$PATH:/home/seokhoon.yoon/work/2021/qnx/vendor/nvidia//toolchains/tegra-4.9-nv/usr/bin/aarch64-gnu-linux/
QNX_TARGET=/home/seokhoon.yoon/work/2021/qnx/vendor/nvidia/toolchains/qnx_sdp/target/qnx7
QNX_HOST=/home/seokhoon.yoon/work/2021/qnx/vendor/nvidia/toolchains/qnx_sdp/host/linux/x86_64

